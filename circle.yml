general:
  branches:
    only:
      - master
      - /environment\/.*/

machine:
  timezone: Asia/Tokyo
  environment:
    PATH: $HOME/.local/bin:$PATH
    AWS_DEFAULT_REGION: us-west-2
    TERRAFORM_VERSION: 0.9.1

dependencies:
  override:
    - |
      # Setup AWS CLI
      sudo pip install awscli
      # Configure region
      aws configure set default.region ${AWS_DEFAULT_REGION}
      
      # Configure AWS Keys
      aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_DEV} --profile piano-proxy-dev01
      aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_STG} --profile piano-proxy-stg01
      aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_PRD} --profile piano-proxy-prd01

      aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_DEV} --profile piano-proxy-dev01
      aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_STG} --profile piano-proxy-stg01
      aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_PRD} --profile piano-proxy-prd01

      aws configure set region ${AWS_DEFAULT_REGION} --profile piano-proxy-dev01
      aws configure set region ${AWS_DEFAULT_REGION} --profile piano-proxy-stg01
      aws configure set region ${AWS_DEFAULT_REGION} --profile piano-proxy-prd01

      # Setup Terraform
      if [[ ! -f ~/.local/bin/terraform ]]; then
        mkdir -p ~/.local/bin
        (
          cd ~/.local/bin
          wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          unzip *.zip
          rm *.zip
        )
      fi
  cache_directories:
    - ~/.local/bin

test:
  override:
    - |
      echo "[TEST] AWS CLI is installed."
      which aws
    - |
      echo "[TEST] AWS Credentials."
      aws configure list
      aws configure list --profile piano-proxy-dev01
      aws configure list --profile piano-proxy-stg01
      aws configure list --profile piano-proxy-prd01
    - |
      echo "[TEST] Terraform is installed."
      which terraform
    - |
      echo "[TEST] Terraform plan"
      #case ${CIRCLE_BRANCH} in
      #  "environment/development")
      #    [ -d Terraform/environment/development ] && ( cd Terraform/environment/development ; make test )
      #    ;;
      #  "environment/staging")
      #    [ -d Terraform/environment/staging ]     && ( cd Terraform/environment/staging     ; make test )
      #    ;;
      #  "environment/production")
      #    [ -d Terraform/environment/production ]  && ( cd Terraform/environment/production  ; make test )
      #    ;;
      #  "master")
      #    [ -d Terraform/environment/development ] && ( cd Terraform/environment/development ; make test )
      #    [ -d Terraform/environment/staging ]     && ( cd Terraform/environment/staging     ; make test )
      #    [ -d Terraform/environment/production ]  && ( cd Terraform/environment/production  ; make test )
      #    ;;
      #esac
      set +xv
      cd Terraform/environment/development
      make -n test
      make test

deployment:
  master:
    branch: master
    commands:
      - uname -a
  production:
    branch: environment/production
    commands:
      - |
        [ -d Terraform/environment/production ]  && ( cd Terraform/environment/production  ; make deploy )
  staging:
    branch: environment/staging
    commands:
      - |
        [ -d Terraform/environment/staging ]     && ( cd Terraform/environment/staging     ; make deploy )
  development:
    branch: environment/development
    commands:
      - |
        [ -d Terraform/environment/development ] && ( cd Terraform/environment/development ; make deploy )
